@using xtEntityFramework.Models

@typeparam TEntity
@typeparam TModel


@if (Page.Sort == PropertyName)
{
    @if (Page.Order == xtEntityFramework.Attributes.Order.Ascending)
    {
        <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Ascending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-thick-top" aria-hidden="true"></span></a>
        <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Descending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-bottom" aria-hidden="true"></span></a>
    }
    else
    {
        <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Ascending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-top" aria-hidden="true"></span></a>
        <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Descending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span></a>
    }
}
else
{
    <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Ascending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-top" aria-hidden="true"></span></a>
    <a @onclick="(async() => { Page.Sort = PropertyName; Page.Order = xtEntityFramework.Attributes.Order.Descending; await Update.InvokeAsync(); })"><span class="oi oi-arrow-bottom" aria-hidden="true"></span></a>
}
@code {
    [Parameter]
    public Page<TEntity, TModel> Page { get; set; }

    [Parameter]
    public string PropertyName { get; set; }

    [Parameter]
    public EventCallback Update { get; set; }
}