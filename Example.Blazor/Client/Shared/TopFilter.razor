@using xtEntityFramework.Models
@using xtEntityFramework.Attributes
@using xtEntityFramework

@typeparam TEntity
@typeparam TModel


<select @onchange="PropertyChanged">
    <option></option>
    @foreach(var prop in typeof(TEntity).GetProperties().Where(pi => Attribute.IsDefined(pi, typeof(FilterableAttribute))))
    {
        <option value="@prop.Name">@prop.Name</option>
    }
</select>
@if (Comparisons != null)
{
    <select @onchange="ComparisonChanged">
        <option></option>
        @foreach (var comparison in Comparisons)
        {
            <option value="@comparison">@comparison.ToString()</option>
        }
    </select>
}
<input @onchange="ValueChanged" />
@code {
    [Parameter]
    public Page<TEntity, TModel> Page { get; set; }

    [Parameter]
    public EventCallback Update { get; set; }

    private List<Comparison> Comparisons { get; set; }

    Filter<TEntity> Filter { get; set; } = new Filter<TEntity>();

    protected override void OnInitialized()
    {
        Page.Filters.Filters.Add(Filter);

    }

    private async Task PropertyChanged(ChangeEventArgs args)
    {
        Comparisons = ComparisonCache.GetComparisons(typeof(TEntity).GetProperties().FirstOrDefault(p => p.Name == args.Value.ToString()).PropertyType).ToList();
        Filter.Name = args.Value.ToString();
        await UpdateFilter();
    }

    private async Task ComparisonChanged(ChangeEventArgs args)
    {
        Filter.Comparison = (Comparison)Enum.Parse(typeof(Comparison), args.Value.ToString());
        await UpdateFilter();
    }

    private async Task ValueChanged(ChangeEventArgs args)
    {
        Filter.Value = args.Value.ToString();
        await UpdateFilter();
    }

    private async Task UpdateFilter()
    {
        var f = Page.Filters.Filters?.Last();
        if (f != null && f.Name != null && f.Value != null)
            await Update.InvokeAsync();
    }
}